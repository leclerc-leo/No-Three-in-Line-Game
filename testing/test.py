def char_to_value(char):
    """Convert a character to its numeric value (0-9, A-Z)."""
    if char.isdigit():
        return int(char)
    return ord(char.upper()) - ord("A") + 10


def parse_positions(line):
    """Convert a line to a list of (x, y) positions."""
    positions = []
    for i in range(
        1, len(line), 2
    ):  # Skip the first character ('.') and iterate in pairs
        x1 = char_to_value(line[i])
        x2 = char_to_value(line[i + 1])
        y = (i - 1) // 2
        positions.append((x1, y))
        positions.append((x2, y))
    return positions


def check_positions_in_grid(positions, grid):
    """Check if all positions are in the given grid."""
    return all(pos in grid for pos in positions)


def process_input_file(input_file, grid, output_file):
    """Process the input file and write valid lines to the output file."""
    with open(input_file, "r") as infile, open(output_file, "w") as outfile:
        for line in infile:
            line = line.strip()
            positions = parse_positions(line)
            if check_positions_in_grid(positions, grid):
                outfile.write(line + "\n")


# Define the grid (as per grid.py).
grid = {
    (12, 4),
    (7, 17),
    (4, 9),
    (5, 1),
    (8, 0),
    (14, 13),
    (5, 10),
    (3, 13),
    (10, 6),
    (9, 8),
    (11, 5),
    (8, 9),
    (9, 17),
    (11, 14),
    (2, 11),
    (13, 8),
    (15, 5),
    (6, 2),
    (7, 1),
    (15, 14),
    (6, 11),
    (16, 13),
    (7, 10),
    (4, 2),
    (3, 6),
    (5, 3),
    (8, 2),
    (9, 1),
    (3, 15),
    (14, 15),
    (8, 11),
    (5, 12),
    (9, 10),
    (11, 7),
    (0, 7),
    (2, 4),
    (13, 1),
    (11, 16),
    (13, 10),
    (1, 8),
    (15, 7),
    (16, 6),
    (7, 3),
    (6, 4),
    (6, 13),
    (7, 12),
    (3, 8),
    (17, 7),
    (8, 4),
    (14, 8),
    (9, 3),
    (11, 0),
    (5, 14),
    (5, 5),
    (9, 12),
    (11, 9),
    (0, 9),
    (13, 3),
    (13, 12),
    (15, 9),
    (1, 10),
    (16, 8),
    (7, 5),
    (6, 6),
    (7, 14),
    (12, 13),
    (3, 10),
    (5, 7),
    (17, 9),
    (14, 10),
    (9, 5),
    (11, 2),
    (5, 16),
    (9, 14),
    (13, 5),
    (10, 15),
    (13, 14),
    (1, 12),
    (15, 11),
    (16, 10),
    (7, 7),
    (7, 16),
    (12, 6),
    (3, 3),
    (14, 3),
    (12, 15),
    (3, 12),
    (5, 9),
    (4, 11),
    (17, 11),
    (9, 7),
    (11, 4),
    (14, 12),
    (9, 16),
    (10, 8),
    (13, 7),
    (1, 5),
    (15, 4),
    (6, 1),
    (7, 0),
    (13, 16),
    (10, 17),
    (2, 13),
    (16, 12),
    (7, 9),
    (15, 13),
    (12, 8),
    (3, 5),
    (5, 2),
    (4, 4),
    (14, 5),
    (9, 0),
    (3, 14),
    (5, 11),
    (4, 13),
    (14, 14),
    (9, 9),
    (10, 1),
    (8, 13),
    (10, 10),
    (13, 9),
    (1, 7),
    (2, 6),
    (16, 5),
    (7, 2),
    (15, 6),
    (7, 11),
    (12, 1),
    (6, 15),
    (12, 10),
    (3, 7),
    (5, 4),
    (4, 6),
    (14, 7),
    (9, 2),
    (5, 13),
    (4, 15),
    (8, 6),
    (10, 3),
    (13, 2),
    (8, 15),
    (10, 12),
    (13, 11),
    (11, 11),
    (0, 11),
    (16, 7),
    (7, 4),
    (1, 9),
    (2, 8),
    (6, 8),
    (12, 3),
    (6, 17),
    (12, 12),
    (14, 9),
    (3, 9),
    (5, 6),
    (4, 8),
    (8, 8),
    (10, 5),
    (13, 4),
    (8, 17),
    (10, 14),
    (1, 11),
    (11, 13),
    (2, 10),
    (16, 9),
    (6, 10),
    (12, 5),
    (14, 2),
    (3, 2),
    (4, 1),
    (12, 14),
    (14, 11),
    (3, 11),
    (4, 10),
    (8, 1),
    (8, 10),
    (10, 7),
    (1, 4),
    (11, 6),
    (2, 3),
    (0, 6),
    (10, 16),
    (1, 13),
    (11, 15),
    (2, 12),
    (6, 3),
    (6, 12),
    (12, 7),
    (14, 4),
    (3, 4),
    (4, 3),
    (12, 16),
    (4, 12),
    (17, 6),
    (8, 3),
    (10, 0),
    (8, 12),
    (10, 9),
    (1, 6),
    (9, 11),
    (2, 5),
    (11, 8),
    (16, 4),
    (0, 8),
    (11, 17),
    (2, 14),
    (15, 8),
    (6, 5),
    (6, 14),
    (7, 13),
    (12, 9),
    (14, 6),
    (4, 5),
    (4, 14),
    (17, 8),
    (8, 5),
    (10, 2),
    (9, 4),
    (11, 1),
    (5, 15),
    (8, 14),
    (10, 11),
    (9, 13),
    (11, 10),
    (0, 10),
    (2, 7),
    (13, 13),
    (15, 10),
    (6, 7),
    (7, 6),
    (12, 2),
    (6, 16),
    (7, 15),
    (12, 11),
    (4, 7),
    (4, 16),
    (5, 8),
    (8, 7),
    (10, 4),
    (9, 6),
    (11, 3),
    (17, 10),
    (8, 16),
    (10, 13),
    (9, 15),
    (11, 12),
    (2, 9),
    (13, 6),
    (15, 3),
    (6, 0),
    (13, 15),
    (15, 12),
    (6, 9),
    (16, 11),
    (7, 8),
}

# Example usage
input_file = "input"  # Replace with your actual input file path
output_file = "output"  # Replace with your desired output file path
process_input_file(input_file, grid, output_file)
